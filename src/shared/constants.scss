$blueDark: #003A5E;
$blueMedium: #0055A0;
$blueLight: #0079BD;
$blueLightest: #F1F8FF;
$blueLighter: #F3FAFF;
$red: #E72227;
$green: #00A54F;
$yellow: #FFE400;
$grayLight: #B5B5B5;
$grayDark: #4D4D4D;
$white: #FFFFFF;
$black: #000000;


$fontA: 'nunito';
$fontABold: 'nunito-bold';
$fontALigth: 'nunito-light';

$fontB: 'montserrat';
$fontBBold: 'montserrat-bold';

$isTablet: "only screen and (min-width : 768px) and (max-width: 1023px)";


// ****************** mixins *********************

// generic transform
@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
	 @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
          transform-origin: $origin;
}
//transform border-radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
// **************** GRADIENTS ********************
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
// **************** MISC *************************
.btnA {
  display: inline-block;
  padding: 15px 55px 15px 20px;
  line-height: 10px;
  position: relative;

  @extend .arrow;
 }

 .arrow {
   &:after {
     content: '';
     position: absolute;
     top: 12px;
     right: 15px;

     background-position: -160px -46px;
     width: 17px;
     height: 17px;
     background-image: url('http://127.0.0.1:3030/images/sprites/sprite-general.png');
     background-size: 183px 143px
   }
 }

 .arrowB {
   &:after {
     content: '';
     position: absolute;
     top: 4px;
     right: 4px;

    background-position: -160px -23px;
    width: 23px;
    height: 23px;
    background-image: url('http://127.0.0.1:3030/images/sprites/sprite-general.png');
    background-size: 183px 143px;
   }
 }
